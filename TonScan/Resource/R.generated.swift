//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `primaryBackground`.
    static let primaryBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryBackground")
    /// Color `primaryLink`.
    static let primaryLink = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryLink")
    /// Color `primaryText`.
    static let primaryText = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryText")
    /// Color `secondaryText`.
    static let secondaryText = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryText")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryLink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryLink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryText, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "primaryBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "primaryLink", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryLink(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryLink.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "primaryText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "secondaryText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryText.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleSecurityApplicationGroups {
      static let groupTonExpressScanner = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.ton.express.scanner") ?? "group.ton.express.scanner"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `TTCommons-DemiBold.otf`.
    static let ttCommonsDemiBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "TTCommons-DemiBold", pathExtension: "otf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TTCommons-DemiBold", withExtension: "otf")`
    static func ttCommonsDemiBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ttCommonsDemiBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `TTCommons-DemiBold`.
    static let ttCommonsDemiBold = Rswift.FontResource(fontName: "TTCommons-DemiBold")

    /// `UIFont(name: "TTCommons-DemiBold", size: ...)`
    static func ttCommonsDemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ttCommonsDemiBold, size: size)
    }

    static func validate() throws {
      if R.font.ttCommonsDemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TTCommons-DemiBold' could not be loaded, is 'TTCommons-DemiBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 29 images.
  struct image {
    /// Image `addressActionBackground`.
    static let addressActionBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "addressActionBackground")
    /// Image `addressActionStrokeBackground`.
    static let addressActionStrokeBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "addressActionStrokeBackground")
    /// Image `addressAlias`.
    static let addressAlias = Rswift.ImageResource(bundle: R.hostingBundle, name: "addressAlias")
    /// Image `addressNotificationDisable`.
    static let addressNotificationDisable = Rswift.ImageResource(bundle: R.hostingBundle, name: "addressNotificationDisable")
    /// Image `addressNotificationEnable`.
    static let addressNotificationEnable = Rswift.ImageResource(bundle: R.hostingBundle, name: "addressNotificationEnable")
    /// Image `addressUnwatch`.
    static let addressUnwatch = Rswift.ImageResource(bundle: R.hostingBundle, name: "addressUnwatch")
    /// Image `addressWatchIcon`.
    static let addressWatchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "addressWatchIcon")
    /// Image `emptyViewLogoNormal`.
    static let emptyViewLogoNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyViewLogoNormal")
    /// Image `emptyViewLogoSad`.
    static let emptyViewLogoSad = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyViewLogoSad")
    /// Image `feedFooterBackground`.
    static let feedFooterBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedFooterBackground")
    /// Image `feedHeaderBackground`.
    static let feedHeaderBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedHeaderBackground")
    /// Image `feedHeaderFooterBackground`.
    static let feedHeaderFooterBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedHeaderFooterBackground")
    /// Image `feedHeaderTypeIn`.
    static let feedHeaderTypeIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedHeaderTypeIn")
    /// Image `feedHeaderTypeLog`.
    static let feedHeaderTypeLog = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedHeaderTypeLog")
    /// Image `feedHeaderTypeOut`.
    static let feedHeaderTypeOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedHeaderTypeOut")
    /// Image `feedItemHeaderBubbleBackground`.
    static let feedItemHeaderBubbleBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedItemHeaderBubbleBackground")
    /// Image `feedItemMessageTypeIn`.
    static let feedItemMessageTypeIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedItemMessageTypeIn")
    /// Image `feedMessageTypeOut`.
    static let feedMessageTypeOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedMessageTypeOut")
    /// Image `feedMiddleBackground`.
    static let feedMiddleBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedMiddleBackground")
    /// Image `navigationBack`.
    static let navigationBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationBack")
    /// Image `navigationNotification`.
    static let navigationNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationNotification")
    /// Image `navigationPopupClose`.
    static let navigationPopupClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationPopupClose")
    /// Image `navigationSettings`.
    static let navigationSettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationSettings")
    /// Image `navigationWallets`.
    static let navigationWallets = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationWallets")
    /// Image `walletEdit`.
    static let walletEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "walletEdit")
    /// Image `walletIcon`.
    static let walletIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "walletIcon")
    /// Image `walletNotificationsDisable`.
    static let walletNotificationsDisable = Rswift.ImageResource(bundle: R.hostingBundle, name: "walletNotificationsDisable")
    /// Image `walletNotificationsEnable`.
    static let walletNotificationsEnable = Rswift.ImageResource(bundle: R.hostingBundle, name: "walletNotificationsEnable")
    /// Image `walletUnwatch`.
    static let walletUnwatch = Rswift.ImageResource(bundle: R.hostingBundle, name: "walletUnwatch")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addressActionBackground", bundle: ..., traitCollection: ...)`
    static func addressActionBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addressActionBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addressActionStrokeBackground", bundle: ..., traitCollection: ...)`
    static func addressActionStrokeBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addressActionStrokeBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addressAlias", bundle: ..., traitCollection: ...)`
    static func addressAlias(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addressAlias, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addressNotificationDisable", bundle: ..., traitCollection: ...)`
    static func addressNotificationDisable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addressNotificationDisable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addressNotificationEnable", bundle: ..., traitCollection: ...)`
    static func addressNotificationEnable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addressNotificationEnable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addressUnwatch", bundle: ..., traitCollection: ...)`
    static func addressUnwatch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addressUnwatch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addressWatchIcon", bundle: ..., traitCollection: ...)`
    static func addressWatchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addressWatchIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emptyViewLogoNormal", bundle: ..., traitCollection: ...)`
    static func emptyViewLogoNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyViewLogoNormal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emptyViewLogoSad", bundle: ..., traitCollection: ...)`
    static func emptyViewLogoSad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyViewLogoSad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedFooterBackground", bundle: ..., traitCollection: ...)`
    static func feedFooterBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedFooterBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedHeaderBackground", bundle: ..., traitCollection: ...)`
    static func feedHeaderBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedHeaderBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedHeaderFooterBackground", bundle: ..., traitCollection: ...)`
    static func feedHeaderFooterBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedHeaderFooterBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedHeaderTypeIn", bundle: ..., traitCollection: ...)`
    static func feedHeaderTypeIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedHeaderTypeIn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedHeaderTypeLog", bundle: ..., traitCollection: ...)`
    static func feedHeaderTypeLog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedHeaderTypeLog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedHeaderTypeOut", bundle: ..., traitCollection: ...)`
    static func feedHeaderTypeOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedHeaderTypeOut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedItemHeaderBubbleBackground", bundle: ..., traitCollection: ...)`
    static func feedItemHeaderBubbleBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedItemHeaderBubbleBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedItemMessageTypeIn", bundle: ..., traitCollection: ...)`
    static func feedItemMessageTypeIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedItemMessageTypeIn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedMessageTypeOut", bundle: ..., traitCollection: ...)`
    static func feedMessageTypeOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedMessageTypeOut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedMiddleBackground", bundle: ..., traitCollection: ...)`
    static func feedMiddleBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedMiddleBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationBack", bundle: ..., traitCollection: ...)`
    static func navigationBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationNotification", bundle: ..., traitCollection: ...)`
    static func navigationNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationNotification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationPopupClose", bundle: ..., traitCollection: ...)`
    static func navigationPopupClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationPopupClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationSettings", bundle: ..., traitCollection: ...)`
    static func navigationSettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationSettings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigationWallets", bundle: ..., traitCollection: ...)`
    static func navigationWallets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationWallets, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walletEdit", bundle: ..., traitCollection: ...)`
    static func walletEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walletIcon", bundle: ..., traitCollection: ...)`
    static func walletIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walletNotificationsDisable", bundle: ..., traitCollection: ...)`
    static func walletNotificationsDisable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletNotificationsDisable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walletNotificationsEnable", bundle: ..., traitCollection: ...)`
    static func walletNotificationsEnable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletNotificationsEnable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walletUnwatch", bundle: ..., traitCollection: ...)`
    static func walletUnwatch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletUnwatch, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 0 localization keys.
    struct infoPlist {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 38 localization keys.
    struct localizable {
      /// ru translation: TON Scan
      ///
      /// Locales: ru, en
      static let feedTitle = Rswift.StringResource(key: "feedTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Адрес
      ///
      /// Locales: ru, en
      static let addressAddress = Rswift.StringResource(key: "addressAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Адрес не найден
      ///
      /// Locales: ru, en
      static let searchEmptyTitle = Rswift.StringResource(key: "searchEmptyTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Алиас
      ///
      /// Locales: ru, en
      static let addressAlias = Rswift.StringResource(key: "addressAlias", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Алиас позволяет создать короткое имя для адреса.
      ///
      /// Locales: ru, en
      static let addressSetAliasDescription = Rswift.StringResource(key: "addressSetAliasDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Баланс
      ///
      /// Locales: ru, en
      static let addressBalance = Rswift.StringResource(key: "addressBalance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Введите адрес TON
      ///
      /// Locales: ru, en
      static let feedSearchPlaceholder = Rswift.StringResource(key: "feedSearchPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Возможно, вы ввели неверный адрес.
      ///
      /// Locales: ru, en
      static let searchEmptySubtitle = Rswift.StringResource(key: "searchEmptySubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Добавьте первый адрес!
      ///
      /// Locales: ru, en
      static let feedEmptyTitle = Rswift.StringResource(key: "feedEmptyTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Значение
      ///
      /// Locales: ru, en
      static let itemValue = Rswift.StringResource(key: "itemValue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Источник
      ///
      /// Locales: ru, en
      static let itemSource = Rswift.StringResource(key: "itemSource", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Комиссия
      ///
      /// Locales: ru, en
      static let itemFee = Rswift.StringResource(key: "itemFee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Назначение
      ///
      /// Locales: ru, en
      static let itemDestination = Rswift.StringResource(key: "itemDestination", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Неизвестен
      ///
      /// Locales: ru, en
      static let addressUnknownContractType = Rswift.StringResource(key: "addressUnknownContractType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: ОК
      ///
      /// Locales: ru, en
      static let commonOk = Rswift.StringResource(key: "commonOk", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Обновить
      ///
      /// Locales: ru, en
      static let commonLoadingFailedAction = Rswift.StringResource(key: "commonLoadingFailedAction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Открыть настройки
      ///
      /// Locales: ru, en
      static let alert_open_settings_title = Rswift.StringResource(key: "alert_open_settings_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Отмена
      ///
      /// Locales: ru, en
      static let alert_cancel_title = Rswift.StringResource(key: "alert_cancel_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Отмена
      ///
      /// Locales: ru, en
      static let commonCancel = Rswift.StringResource(key: "commonCancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Отписаться
      ///
      /// Locales: ru, en
      static let addressUnfollow = Rswift.StringResource(key: "addressUnfollow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Отправитель
      ///
      /// Locales: ru, en
      static let itemSender = Rswift.StringResource(key: "itemSender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Перейдите в «Настройки» и разрешите доступ к уведомлениям
      ///
      /// Locales: ru, en
      static let alert_push_message = Rswift.StringResource(key: "alert_push_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Подписаться
      ///
      /// Locales: ru, en
      static let addressFollow = Rswift.StringResource(key: "addressFollow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Поиск
      ///
      /// Locales: ru, en
      static let feedEmptyAction = Rswift.StringResource(key: "feedEmptyAction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Получатель
      ///
      /// Locales: ru, en
      static let itemRecipient = Rswift.StringResource(key: "itemRecipient", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Разрешите доступ к уведомлениям
      ///
      /// Locales: ru, en
      static let alert_push_title = Rswift.StringResource(key: "alert_push_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Следите за избранными адресами в ленте.
      ///
      /// Locales: ru, en
      static let feedEmptySubtitle = Rswift.StringResource(key: "feedEmptySubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Сообщение
      ///
      /// Locales: ru, en
      static let itemMessage = Rswift.StringResource(key: "itemMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Список наблюдения
      ///
      /// Locales: ru, en
      static let watchListTitle = Rswift.StringResource(key: "watchListTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Статус
      ///
      /// Locales: ru, en
      static let addressState = Rswift.StringResource(key: "addressState", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Тип контракта
      ///
      /// Locales: ru, en
      static let addressContractType = Rswift.StringResource(key: "addressContractType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Транзакция
      ///
      /// Locales: ru, en
      static let itemTranscation = Rswift.StringResource(key: "itemTranscation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Упс!
      ///
      /// Locales: ru, en
      static let commonLoadingFailedTitle = Rswift.StringResource(key: "commonLoadingFailedTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Установить алиас
      ///
      /// Locales: ru, en
      static let addressSetAlias = Rswift.StringResource(key: "addressSetAlias", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: Что-то пошло не так. Попробуйте позже.
      ///
      /// Locales: ru, en
      static let commonLoadingFailedSubtitle = Rswift.StringResource(key: "commonLoadingFailedSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: • Активен
      ///
      /// Locales: ru, en
      static let addressActiveState = Rswift.StringResource(key: "addressActiveState", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: • Заморожен
      ///
      /// Locales: ru, en
      static let addressFrozenState = Rswift.StringResource(key: "addressFrozenState", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)
      /// ru translation: • Не инициализирован
      ///
      /// Locales: ru, en
      static let addressUninitializedState = Rswift.StringResource(key: "addressUninitializedState", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en"], comment: nil)

      /// ru translation: TON Scan
      ///
      /// Locales: ru, en
      static func feedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feedTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feedTitle"
        }

        return NSLocalizedString("feedTitle", bundle: bundle, comment: "")
      }

      /// ru translation: Адрес
      ///
      /// Locales: ru, en
      static func addressAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressAddress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressAddress"
        }

        return NSLocalizedString("addressAddress", bundle: bundle, comment: "")
      }

      /// ru translation: Адрес не найден
      ///
      /// Locales: ru, en
      static func searchEmptyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("searchEmptyTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "searchEmptyTitle"
        }

        return NSLocalizedString("searchEmptyTitle", bundle: bundle, comment: "")
      }

      /// ru translation: Алиас
      ///
      /// Locales: ru, en
      static func addressAlias(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressAlias", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressAlias"
        }

        return NSLocalizedString("addressAlias", bundle: bundle, comment: "")
      }

      /// ru translation: Алиас позволяет создать короткое имя для адреса.
      ///
      /// Locales: ru, en
      static func addressSetAliasDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressSetAliasDescription", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressSetAliasDescription"
        }

        return NSLocalizedString("addressSetAliasDescription", bundle: bundle, comment: "")
      }

      /// ru translation: Баланс
      ///
      /// Locales: ru, en
      static func addressBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressBalance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressBalance"
        }

        return NSLocalizedString("addressBalance", bundle: bundle, comment: "")
      }

      /// ru translation: Введите адрес TON
      ///
      /// Locales: ru, en
      static func feedSearchPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feedSearchPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feedSearchPlaceholder"
        }

        return NSLocalizedString("feedSearchPlaceholder", bundle: bundle, comment: "")
      }

      /// ru translation: Возможно, вы ввели неверный адрес.
      ///
      /// Locales: ru, en
      static func searchEmptySubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("searchEmptySubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "searchEmptySubtitle"
        }

        return NSLocalizedString("searchEmptySubtitle", bundle: bundle, comment: "")
      }

      /// ru translation: Добавьте первый адрес!
      ///
      /// Locales: ru, en
      static func feedEmptyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feedEmptyTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feedEmptyTitle"
        }

        return NSLocalizedString("feedEmptyTitle", bundle: bundle, comment: "")
      }

      /// ru translation: Значение
      ///
      /// Locales: ru, en
      static func itemValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("itemValue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "itemValue"
        }

        return NSLocalizedString("itemValue", bundle: bundle, comment: "")
      }

      /// ru translation: Источник
      ///
      /// Locales: ru, en
      static func itemSource(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("itemSource", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "itemSource"
        }

        return NSLocalizedString("itemSource", bundle: bundle, comment: "")
      }

      /// ru translation: Комиссия
      ///
      /// Locales: ru, en
      static func itemFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("itemFee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "itemFee"
        }

        return NSLocalizedString("itemFee", bundle: bundle, comment: "")
      }

      /// ru translation: Назначение
      ///
      /// Locales: ru, en
      static func itemDestination(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("itemDestination", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "itemDestination"
        }

        return NSLocalizedString("itemDestination", bundle: bundle, comment: "")
      }

      /// ru translation: Неизвестен
      ///
      /// Locales: ru, en
      static func addressUnknownContractType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressUnknownContractType", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressUnknownContractType"
        }

        return NSLocalizedString("addressUnknownContractType", bundle: bundle, comment: "")
      }

      /// ru translation: ОК
      ///
      /// Locales: ru, en
      static func commonOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commonOk", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commonOk"
        }

        return NSLocalizedString("commonOk", bundle: bundle, comment: "")
      }

      /// ru translation: Обновить
      ///
      /// Locales: ru, en
      static func commonLoadingFailedAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commonLoadingFailedAction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commonLoadingFailedAction"
        }

        return NSLocalizedString("commonLoadingFailedAction", bundle: bundle, comment: "")
      }

      /// ru translation: Открыть настройки
      ///
      /// Locales: ru, en
      static func alert_open_settings_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_open_settings_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_open_settings_title"
        }

        return NSLocalizedString("alert_open_settings_title", bundle: bundle, comment: "")
      }

      /// ru translation: Отмена
      ///
      /// Locales: ru, en
      static func alert_cancel_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_cancel_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_cancel_title"
        }

        return NSLocalizedString("alert_cancel_title", bundle: bundle, comment: "")
      }

      /// ru translation: Отмена
      ///
      /// Locales: ru, en
      static func commonCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commonCancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commonCancel"
        }

        return NSLocalizedString("commonCancel", bundle: bundle, comment: "")
      }

      /// ru translation: Отписаться
      ///
      /// Locales: ru, en
      static func addressUnfollow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressUnfollow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressUnfollow"
        }

        return NSLocalizedString("addressUnfollow", bundle: bundle, comment: "")
      }

      /// ru translation: Отправитель
      ///
      /// Locales: ru, en
      static func itemSender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("itemSender", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "itemSender"
        }

        return NSLocalizedString("itemSender", bundle: bundle, comment: "")
      }

      /// ru translation: Перейдите в «Настройки» и разрешите доступ к уведомлениям
      ///
      /// Locales: ru, en
      static func alert_push_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_push_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_push_message"
        }

        return NSLocalizedString("alert_push_message", bundle: bundle, comment: "")
      }

      /// ru translation: Подписаться
      ///
      /// Locales: ru, en
      static func addressFollow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressFollow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressFollow"
        }

        return NSLocalizedString("addressFollow", bundle: bundle, comment: "")
      }

      /// ru translation: Поиск
      ///
      /// Locales: ru, en
      static func feedEmptyAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feedEmptyAction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feedEmptyAction"
        }

        return NSLocalizedString("feedEmptyAction", bundle: bundle, comment: "")
      }

      /// ru translation: Получатель
      ///
      /// Locales: ru, en
      static func itemRecipient(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("itemRecipient", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "itemRecipient"
        }

        return NSLocalizedString("itemRecipient", bundle: bundle, comment: "")
      }

      /// ru translation: Разрешите доступ к уведомлениям
      ///
      /// Locales: ru, en
      static func alert_push_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_push_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_push_title"
        }

        return NSLocalizedString("alert_push_title", bundle: bundle, comment: "")
      }

      /// ru translation: Следите за избранными адресами в ленте.
      ///
      /// Locales: ru, en
      static func feedEmptySubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feedEmptySubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feedEmptySubtitle"
        }

        return NSLocalizedString("feedEmptySubtitle", bundle: bundle, comment: "")
      }

      /// ru translation: Сообщение
      ///
      /// Locales: ru, en
      static func itemMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("itemMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "itemMessage"
        }

        return NSLocalizedString("itemMessage", bundle: bundle, comment: "")
      }

      /// ru translation: Список наблюдения
      ///
      /// Locales: ru, en
      static func watchListTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("watchListTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "watchListTitle"
        }

        return NSLocalizedString("watchListTitle", bundle: bundle, comment: "")
      }

      /// ru translation: Статус
      ///
      /// Locales: ru, en
      static func addressState(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressState", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressState"
        }

        return NSLocalizedString("addressState", bundle: bundle, comment: "")
      }

      /// ru translation: Тип контракта
      ///
      /// Locales: ru, en
      static func addressContractType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressContractType", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressContractType"
        }

        return NSLocalizedString("addressContractType", bundle: bundle, comment: "")
      }

      /// ru translation: Транзакция
      ///
      /// Locales: ru, en
      static func itemTranscation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("itemTranscation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "itemTranscation"
        }

        return NSLocalizedString("itemTranscation", bundle: bundle, comment: "")
      }

      /// ru translation: Упс!
      ///
      /// Locales: ru, en
      static func commonLoadingFailedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commonLoadingFailedTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commonLoadingFailedTitle"
        }

        return NSLocalizedString("commonLoadingFailedTitle", bundle: bundle, comment: "")
      }

      /// ru translation: Установить алиас
      ///
      /// Locales: ru, en
      static func addressSetAlias(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressSetAlias", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressSetAlias"
        }

        return NSLocalizedString("addressSetAlias", bundle: bundle, comment: "")
      }

      /// ru translation: Что-то пошло не так. Попробуйте позже.
      ///
      /// Locales: ru, en
      static func commonLoadingFailedSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commonLoadingFailedSubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "commonLoadingFailedSubtitle"
        }

        return NSLocalizedString("commonLoadingFailedSubtitle", bundle: bundle, comment: "")
      }

      /// ru translation: • Активен
      ///
      /// Locales: ru, en
      static func addressActiveState(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressActiveState", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressActiveState"
        }

        return NSLocalizedString("addressActiveState", bundle: bundle, comment: "")
      }

      /// ru translation: • Заморожен
      ///
      /// Locales: ru, en
      static func addressFrozenState(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressFrozenState", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressFrozenState"
        }

        return NSLocalizedString("addressFrozenState", bundle: bundle, comment: "")
      }

      /// ru translation: • Не инициализирован
      ///
      /// Locales: ru, en
      static func addressUninitializedState(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressUninitializedState", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressUninitializedState"
        }

        return NSLocalizedString("addressUninitializedState", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
